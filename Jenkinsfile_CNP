#!groovy
import uk.gov.hmcts.contino.AppPipelineDsl
import uk.gov.hmcts.contino.GithubAPI

properties([
  [$class: 'GithubProjectProperty', projectUrlStr: 'https://github.com/hmcts/prl-cos-api.git'],
  pipelineTriggers([[$class: 'GitHubPushTrigger']])
])

@Library("Infrastructure")

def type = "java"
def product = "prl"
def component = "cos"
def channel = '#prl-tech-notifications'

// Vars for Kubernetes
env.PACT_BROKER_FULL_URL = 'https://pact-broker.platform.hmcts.net'

static Map<String, Object> secret(String secretName, String envVariable) {
 [$class     : 'AzureKeyVaultSecret',
  secretType : 'Secret',
  name       : secretName,
  envVariable: envVariable
 ]
}

def setPreviewEnvVars() {
  def githubApi = new GithubAPI(this)

  env.CORE_CASE_DATA_API_URL = "http://ccd-data-store-api-{{ .Values.global.environment }}.service.core-compute-{{ .Values.global.environment }}.internal"
  env.CCD_CASE_DOCS_AM_API = "http://ccd-case-document-am-api-{{ .Values.global.environment }}.service.core-compute-{{ .Values.global.environment }}.internal"
  env.ACA_SERVICE_API_BASEURL = "http://aac-manage-case-assignment-{{ .Values.global.environment }}.service.core-compute-{{ .Values.global.environment }}.internal"
  env.BUNDLE_URL = "http://em-ccd-orchestrator-{{ .Values.global.environment }}.service.core-compute-{{ .Values.global.environment }}.internal"

  if (githubApi.checkForLabel(env.BRANCH_NAME, 'pr-values:def')) {
    env.CORE_CASE_DATA_API_URL = "http://prl-ccd-definitions-pr-2871-ccd-data-store-api"
    env.CCD_CASE_DOCS_AM_API = "http://prl-ccd-definitions-pr-2871-cdam"
    env.ACA_SERVICE_API_BASEURL = "http://prl-ccd-definitions-pr-2871-aac-manage-case-assignment"
    env.BUNDLE_URL = "http://prl-ccd-definitions-pr-2871-em-ccdorc"
  }
  echo 'value of CORE_CASE_DATA_API_URL ${env.CORE_CASE_DATA_API_URL}'
}


def secrets = [
   'prl-${env}':[
      secret('prl-cos-idam-client-secret', 'IDAM_CLIENT_SECRET'),
      secret('system-update-user-username', 'SYSTEM_UPDATE_USER_USERNAME'),
      secret('system-update-user-password', 'PRL_SYSTEM_UPDATE_PASSWORD'),
      secret('microservicekey-prl-cos-api', 'IDAM_S2S_AUTH_TOTP_SECRET'),
      secret('notification-client-api-key', 'UK_GOV_NOTIFY_API_KEY'),
      secret('test-genericpassword', 'PRL_GENERIC_PASSWORD'),
      secret("launchDarkly-sdk-key", "LAUNCH_DARKLY_SDK_KEY"),
      secret("AppInsightsInstrumentationKey", "APP_INSIGHTS_INSTRUMENTATION_KEY"),
      secret("southampton-court-email-address", "SOUTHAMPTON_COURT_EMAIL_ADDRESS"),
      secret("idam-solicitor-username", "IDAM_SOLICITOR_USERNAME"),
      secret("idam-solicitor-password", "IDAM_SOLICITOR_PASSWORD"),
      secret("send-grid-api-key", "SEND_GRID_API_KEY"),
      secret("rpa-notify-to-email", "RPA_NOTIFY_TO_EMAIL"),
      secret("rpa-notify-from-email", "RPA_NOTIFY_FROM_EMAIL"),
      secret("cafcass-svc-username", "CAFCASS_USERNAME"),
      secret("cafcass-svc-password", "CAFCASS_PASSWORD"),
      secret("citizen-user", "IDAM_CITIZEN_USERNAME"),
      secret("citizen-password", "IDAM_CITIZEN_PASSWORD"),
      secret('prl-citizen-frontend-idam-client-secret', 'CITIZEN_IDAM_CLIENT_SECRET'),
      secret('filtered-court-ids', 'COURT_IDS_TO_FILTER'),
      secret('da-filtered-court-ids', 'DA_COURT_IDS_TO_FILTER'),
      secret('ca-default-court-epimms-id', 'CA_DEFAULT_COURT_EPIMMS_ID'),
      secret('welsh-court-mapping', 'WELSH_COURT_MAPPING'),
      secret('judge-testuser-one', 'JUDGE_USER_NAME'),
      secret('judge-testpassword', 'JUDGE_PASSWORD'),
      secret("courtadmin-swansea-testuser", "IDAM_COURT_ADMIN_USERNAME"),
      secret("courtadmin-swansea-testuser-password", "IDAM_COURT_ADMIN_PASSWORD")
   ]
]

withPipeline(type, product, component) {
  pipelineConf = config;
  loadVaultSecrets(secrets)
  enableAksStagingDeployment()
  enableSlackNotifications(channel)
  disableLegacyDeployment()

  afterAlways('sonarscan') {

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/tests/test",
      reportFiles          : "index.html",
      reportName           : "Unit Tests Report"
    ]

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/tests/integration",
      reportFiles          : "index.html",
      reportName           : "Integration Test Report"
    ]
  }

  afterAlways('checkout') {
    echo 'prl-cos-api checked out'
  }

  afterAlways('test') {
    steps.junit '**/test-results/**/*.xml'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/**/*'
  }

  afterAlways('integrationTest:preview') {
    onPR() {
      setPreviewEnvVars();
    }
  }

  before('functionalTest:aat') {
    env.test_environment = 'aat'
  }
  afterAlways('functionalTest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/**/*'
  }

  // Kubernetes does not retrieve variables from the output terraform
  before('functionalTest:preview') {
    env.test_environment = 'aat'
  }
  afterAlways('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/**/*'
  }

  onMaster() {
    env.ENV = 'aat'
    enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
  }
  onPR() {
    env.ENV = 'preview'
    enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
  }
}
